<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddFilter" xml:space="preserve">
    <value>Add filter</value>
    <comment>Добавить фильтр</comment>
  </data>
  <data name="AddOperandToExpression" xml:space="preserve">
    <value>Add argument to expression</value>
    <comment>Добавить аргумент к выражению</comment>
  </data>
  <data name="AddOperator" xml:space="preserve">
    <value>Add bracketed expression</value>
    <comment>Добавить выражение в скобках</comment>
  </data>
  <data name="AscendingSort" xml:space="preserve">
    <value>Ascending sort</value>
    <comment>Сортировка по возрастанию</comment>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
    <comment>Отмена</comment>
  </data>
  <data name="ClearExpression" xml:space="preserve">
    <value>Clear expression</value>
    <comment>Очистить выражение запроса</comment>
  </data>
  <data name="ColumnWithoutSorting" xml:space="preserve">
    <value>[Column not supported sorting]</value>
    <comment>[Колонка не поддерживает сортировку]</comment>
  </data>
  <data name="CountTitle" xml:space="preserve">
    <value>Count:</value>
    <comment>Кол-во:</comment>
  </data>
  <data name="DefaultExpressionQueryText" xml:space="preserve">
    <value>Choose filter and expression argument for adding</value>
    <comment>Выберите фильтр и аргумент выражения для добавления</comment>
  </data>
  <data name="DefaultExpressionValueText" xml:space="preserve">
    <value>Choose expression</value>
    <comment>Выберите выражение запроса</comment>
  </data>
  <data name="DefaultFilterRowToolTip" xml:space="preserve">
    <value>Field not supported filter by value</value>
    <comment>Поле не поддерживает фильтр по значению</comment>
  </data>
  <data name="DescendingSort" xml:space="preserve">
    <value>Descending sort</value>
    <comment>Сортировка по убыванию</comment>
  </data>
  <data name="EditQueriesButtonText" xml:space="preserve">
    <value>Editor</value>
    <comment>Редактор</comment>
  </data>
  <data name="EditQueriesButtonToolTip" xml:space="preserve">
    <value>Expression editor</value>
    <comment>Редактор запросов</comment>
  </data>
  <data name="Empty" xml:space="preserve">
    <value>(empty)</value>
    <comment>(пустое)</comment>
  </data>
  <data name="ExpressionArgumentsTitle" xml:space="preserve">
    <value>Expressions arguments:</value>
    <comment>Аргументы выражений:</comment>
  </data>
  <data name="ExpressionQueryTitle" xml:space="preserve">
    <value>Expression query:</value>
    <comment>Выражения запроса:</comment>
  </data>
  <data name="FilterComboBoxToolTip" xml:space="preserve">
    <value>Push for change filter</value>
    <comment>Нажмите для выбора фильтра</comment>
  </data>
  <data name="FilterConfiguratorTitle" xml:space="preserve">
    <value>Filter constructor</value>
    <comment>Конструктор фильтра</comment>
  </data>
  <data name="FiltersListTitle" xml:space="preserve">
    <value>Filters:</value>
    <comment>Фильтры:</comment>
  </data>
  <data name="FilterTitle" xml:space="preserve">
    <value>Filter:</value>
    <comment>Фильтр:</comment>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>OK</value>
    <comment>OK</comment>
  </data>
  <data name="PushForChangeSorting" xml:space="preserve">
    <value>[Push for change sorting]</value>
    <comment>[Нажмите для выбора сортировки]</comment>
  </data>
  <data name="RemoveOperandFromExpression" xml:space="preserve">
    <value>Remove argument from expression</value>
    <comment>Убрать аргумент из выражения</comment>
  </data>
  <data name="SavedFiltersListTitle" xml:space="preserve">
    <value>Filters list:</value>
    <comment>Список запросов:</comment>
  </data>
  <data name="ValidationErrorText" xml:space="preserve">
    <value>Error on field</value>
    <comment>Ошибка в поле</comment>
  </data>
  <data name="WithoutFilter" xml:space="preserve">
    <value>(without filter)</value>
    <comment>(без фильтра)</comment>
  </data>
  <data name="And" xml:space="preserve">
    <value>AND</value>
    <comment>И</comment>
  </data>
  <data name="Equal" xml:space="preserve">
    <value>EQUAL</value>
    <comment>РАВНО</comment>
  </data>
  <data name="Greater" xml:space="preserve">
    <value>GREATER</value>
    <comment>БОЛЬШЕ</comment>
  </data>
  <data name="GreaterOrEqual" xml:space="preserve">
    <value>GREATER OR EQUAL</value>
    <comment>БОЛЬШЕ ИЛИ РАВНО</comment>
  </data>
  <data name="Less" xml:space="preserve">
    <value>LESS</value>
    <comment>МЕНЬШЕ</comment>
  </data>
  <data name="LessOrEqual" xml:space="preserve">
    <value>LESS OR EQUAL</value>
    <comment>МЕНЬШЕ ИЛИ РАВНО</comment>
  </data>
  <data name="Not" xml:space="preserve">
    <value>NOT</value>
    <comment>НЕ</comment>
  </data>
  <data name="NotEqual" xml:space="preserve">
    <value>NOT EQUAL</value>
    <comment>НЕ РАВНО</comment>
  </data>
  <data name="Or" xml:space="preserve">
    <value>OR</value>
    <comment>ИЛИ</comment>
  </data>
  <data name="StartsWith" xml:space="preserve">
    <value>START WITH</value>
    <comment>НАЧИНАЕТСЯ С</comment>
  </data>
</root>